{
  "defaults":[
    {
      "headPortrait":"headPortrait",
      "title":"上赛季",
      "details":"速度快垃圾啊快乐的骄傲了开始就对啦开始",
      "number":20
    },
    {
      "headPortrait":"headPortrait1",
      "title":"上赛季1",
      "details":"速度快垃圾啊快乐的骄傲了开始就对啦开始2",
      "number":21
    },
    {
      "headPortrait":"headPortrait2",
      "title":"上赛季2",
      "details":"速度快垃圾啊快乐的骄傲了开始就对啦开始2",
      "number":22
    },
    {
      "headPortrait":"headPortrait3",
      "title":"上赛季3",
      "details":"速度快垃圾啊快乐的骄傲了开始就对啦开始5",
      "number":23
    }
  ],
  "articles":[
    {
        "headPortrait":"",
        "userName":"",
        "time":"",
        "article":"",
        "special":"",
        "reading":"",
        "comments":"",
        "likes":"",
        "articleImage":"",
        "articleText":"<font text=Git学习总结;size=20;color=black/>\n<font text=字数1441 阅读54 评论0 喜欢2;size=12;color=gray/>\n作者：亚里士朱德\n原文地址：<link name=http://yalishizhude.github.io/2015/09/16/git/;address=http://yalishizhude.github.io/2015/09/16/git//>\n从svn到git\n两者都是优秀的版本管理工具（giter请不要鄙视svner）\n\nsvn上手非常容易，操作简单。\ngit功能强大，但是要熟练使用分支不算容易。\ngit因为是分布式的，所以其核心就是分支（只有master分支情况下和svn差不多？），分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到master分支，master分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。\n\n被git坑了一个星期之后决心把官方文档看一下，结合实践经验进行了整理。\n\n新手常见问题\n1.如何查看有哪些分支？\n\ngit branch -a\n2.如何强制检出/切换分支或分支指定文件？\n\ngit checkout <branch> [file] [-f]\n强制更新，以branch版本的代码为主。\n\n3.提交代码出现冲突冲突怎么办？\n\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: \'git pull ...\') before pushing again.\nhint: See the \'Note about fast-forwards\' in \'git push --help\' for details.\n先切换分支，然后拉取分支上最新的代码覆盖到本地；\n\ngit pull\n添加或者提交代码，解决冲突之后。\n\ngit push\n4.如何新建分支\n\ngit checkout -b <branch_name>\n本地建立 branch 並立即切換到新分支；\n\ngit branch -m <new_name>\n修改分支名称。\n\n5.从远程仓库拉取代码到本地仓库，并建立跟踪关系\n\ngit clone http://xxx.git\n或者\n\nget clone git@xxx.git\n然后\n\ngit checkout -b <本地新分支名> <对应的远程分支名>\n6.远程仓库新建了一个分支，如何更新远程分支信息\n\ngit fetch <remote base>\n7.如何在远程仓库新建一个分支\n\ngit branch <branch name>\n新建一个本地分支，按照正常流程提交完代码后，推送到远程\n\ngit push <remote base> <local branch>:<remote branch>\n实用指令\nreset\n\ngit reset [file]\n取消暂存\n\nremote\n\n查看远程仓库名\n\ngit remote -v\n查看远程仓库url\n\ngit remote add <basename> <url>\n新增远程仓库\n\ngit remote show <basename>\n查看远程仓库详细信息\n\ngit remote rename <old basename> <new basename>\n重命名远程仓库\n\npull\n\n相当于fetch和merge\n\npush\n\ngit push [remote_branch] [local_branch]\n推送本地仓库代码到远程仓库，相当于svn的commit\n\ngit push <remote base> [tag name]\n推送本地标签到远程仓库\n\ngit push <remote base> <remote branch>:<local branch>\n将本地分支推送到指定的远程分支\n\ngit push <remote base> --delete <remote branch>\n删除远程分支\n\ntag\n\n查看标签（用来标记标志性的稳定版本信息）\n\ngit tag -l \'[expression]\'\n查看那符合正则表达式的\n\ngit tag -a <tag name> -m <comment>\n添加带注释的标签\n\ngit tag -a <tag name> <md5>\n对某个版本打标签\n\ngit tag [tag name]\n如果没有标签名，则为查看所有标签。带标签名则为新建标签\n\nmerge\n\ngit merge <branch name>\n将其他分支合并到本分支\n\ncommit\n\ngit commit -a -m \'xx\'\n暂存并提交\n\nbranch\n\ngit branch\n查看本地仓库分支\n\ngit branch -v\n查看本地仓库分支最后一次提交情况\n\ngit branch -vv\n查看分支跟踪情况\n\ngit branch <branch name>\n新建分支\n\ngit branch -d <branch name>\n删除分支\n\ngit branch [--merged | --no-merged]\n查看已合并|未合并的本地仓库分支\n\ngit branch -u <remote base>/<remote branch>\n修改当前跟踪分支\n\ncommit\n\ngit commit -a -m \'xx\'\n提交并且暂存暂存的方法\n\ncheckout\n\ngit checkout -- [file]\n恢复文件\n\ngit checkout -b [branchname] [tagname]\n在特定的版本上创建一个新的分支并切换到此分支\n\ngit checkout -b [local branch] [remote base]/[remote branch]\n将远程分支检出到本地分支\n\ngit checkout --track <remote base>/<remote branch>\n让当前分支跟踪远程分支\n\ngit checkout --track <remote base>/<remote branch>\ngit checkout -b <local branch> <remote base>/<remote branch>\n让当前分支跟踪到远程分支。两条命令作用基本一致，不同的是第二条命令可以重命名检出的分支。\n\nrebase\n\ngit rebase [basebranch]\n变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n小技巧\n查看配置\n\ngit config -1\n设置git push 默认\n\ngit config --global push.default current\n设置别名\n\ngit config --global alias.<name> <commend>\n我的设置：\n\ngit config --global alias.st status\ngit config --global alias.cm \"commit -m\"\ngit config --global alias.ph \"push origin <local_repository>:<remote_repository>\"\n保存用户名和密码\n\n对于http(s)协议，可以用下面命令临时缓存\n\ngit config --global credential.helper cache\n开启linux缓存\n\ngit config --global credential.helper wincred\n开启windows缓存\n\n对于ssh协议，可以用ssh key，具体教程网上很多\n\n忽略文件\n\n默认方法是在当前项目目录下创建一个.gitignore文件，如果需要忽略的文件已经添加到版本库中，请先移除git rm --cached [file]不删除文件，只移除追踪。\n\n权威教程\n\n 推荐拓展阅读\n 举报文章  著作权归作者所有"
    }
  ],
  "specials":[]
}



