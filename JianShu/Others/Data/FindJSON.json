{
  "defaults":[
    {
      "headPortrait":"headPortrait",
      "title":"上赛季",
      "details":"速度快垃圾啊快乐的骄傲了开始就对啦开始",
      "number":20
    },
    {
      "headPortrait":"headPortrait1",
      "title":"上赛季1",
      "details":"速度快垃圾啊快乐的骄傲了开始就对啦开始2",
      "number":21
    },
    {
      "headPortrait":"headPortrait2",
      "title":"上赛季2",
      "details":"速度快垃圾啊快乐的骄傲了开始就对啦开始2",
      "number":22
    },
    {
      "headPortrait":"headPortrait3",
      "title":"上赛季3",
      "details":"速度快垃圾啊快乐的骄傲了开始就对啦开始5",
      "number":23
    }
  ],
  "articles":[
    {
        "headPortrait":"",
        "userName":"",
        "time":"",
        "article":"",
        "special":"",
        "reading":"",
        "comments":"",
        "likes":"",
        "articleImage":"",
        "articleText":"//\n//  MainViewController.m\n//  SHBracelet_iOS\n//\n//  Created by molin on 15/9/11.\n//  Copyright (c) 2015年 zl. All rights reserved.\n//\n\n#import \"MainViewController.h\"\n#import \"Define.h\"\n#import \"StepsRoundView.h\"\n#import \"YesterdaySleepView.h\"\n#import \"HeartRateView.h\"\n#import \"CPRView.h\"\n#import \"BloodPressureView.h\"\n#import \"AppDelegate.h\"\n#import \"StepHistogramViewController.h\"\n#import \"TelemetryViewController.h\"\n#import \"SleepShowViewController.h\"\n#import \"HeartRateShowViewController.h\"\n#import \"BloodPressureShowViewController.h\"\n#import \"PromptViewController.h\"\n\n#import \"MotionUtils.h\"\n#import \"AccountTool.h\"\n#import \"StepDayArray.h\"\n#import \"SleepArray.h\"\n#import \"CPRAlgorithm.h\"\n\n#import \"SQLOperate.h\"\n\n#import \"Macros.h\"\n#import \"qBleClient.h\"\n#import \"LoadHelp.h\"\n#import \"SystemManager.h\"\n#import \"DeviceConfig.h\"\n#import \"BleDataTool.h\"\n\n#import \"PromptFrameView.h\"\n\n#define BUTTON_WIDTH self.view.frame.size.width/5 // 按钮的宽\n\n\n@interface MainViewController ()<StepsRoundViewDelegate,YesterdaySleepViewDelegate,HeartRateViewDlegate,CPRViewDelegate,BloodPressureViewDelegate,PromptFrameViewDelegate,CPRAlgorithmDelegate,UIScrollViewDelegate>\n\n@property (nonatomic, strong) NSArray *arr_image;                      // 按钮图片的数组\n\n@property (nonatomic, strong) StepsRoundView *stepsRoundV;             // 实时步数View\n\n@property (nonatomic, strong) YesterdaySleepView *yesterdaySleepV;     // 昨日睡眠View\n\n@property (nonatomic, strong) HeartRateView *heartRateV;               // 心率View\n\n@property (nonatomic, strong) CPRView *cprV;                           // 心肺View\n\n@property (nonatomic, strong) BloodPressureView *bloodPressureV;       // 血压View\n\n@property (nonatomic, strong) UIScrollView *scrollView;                // 主页的scrollView\n\n@property (nonatomic, strong) UIBarButtonItem *otherItem;              // 导航栏右边按钮\n\n@property (nonatomic, strong) UIBarButtonItem *infoItem;               // 导航栏左边按钮\n\n@property (nonatomic, assign) BOOL isUser;                             // 用于导航栏左边按钮用户是否可以点击\n\n@property (nonatomic, strong) PromptFrameView *promprframeview;        // 连接手环的View（黑色条）\n\n@property (nonatomic, copy)   NSString *heartrate;                     // 用于记录心率值\n\n@property (nonatomic, copy)   NSString *today_steps;                   // 用于记录今日步数值\n\n@property (nonatomic, strong) UIButton *button;                        // 用于临时赋值主界面上所有的button\n\n@property (nonatomic, strong) NSMutableArray *heartrateArray;          // 心率值数组\n\n@property (nonatomic, strong) CPRAlgorithm *cprAlgorithm;              // 心肺计算类\n\n@end\n\n@implementation MainViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.view.backgroundColor = [UIColor whiteColor];\n    \n    self.measurementType = MeasurementTypeNormal;\n    self.view_tag = 0;\n    self.heartrate = @\"\";\n    self.isUser = YES;\n    self.main_step = @\"\";\n    self.main_sleep_hour = @\"\";\n    self.main_sleep_minute = @\"\";\n    self.main_step_text = @\"\";\n    self.main_sleep_text = @\"\";\n    self.button = nil;\n    self.heartrateArray = [NSMutableArray new];\n\n    [self.view addSubview:self.scrollView];\n    [self createButtons]; // 主页按钮（睡眠，步数等）\n    [self createNavigationButton]; // 导航栏按钮\n    [self.view addSubview:self.promprframeview];\n    // 关闭用户交互\n    [self userInteractionEnabled_main:NO];\n    \n    //[[NSNotificationCenter defaultCenter] addObserver:self\n      //                                       selector:@selector(synchnorousCompleted:)\n        //                                         name:KENDSYNCHRONOUSDATA\n          //                                     object:nil];\n    \n    // 接收实时数据通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(realtimeData:) name:KREALTIMEDATA object:nil];\n    // 导航栏手环图标“断开连接”通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(changeOtherItem_disconnect) name:@\"disconnect\" object:nil];\n    // 接收导航栏手环图标“连接”通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(changeOtherItem_available) name:deviceLink object:nil];\n    // 接收蓝牙关闭通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(changeOtherItem_disconnect) name:KPOWEROFF object:nil];\n    // 接收血压测试结果通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(readBloodData:) name:KBLOODDATA object:nil];\n    // 接收手环电量通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(chanageElectricity:) name:KBETTERYDATA object:nil];\n    \n//    // 接收每日目标设定修改步数通知\n//    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(getStepsData) name:@\"movementtarget\" object:nil];\n    \n    // 查找蓝牙\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(beingBluetooth) name:KBEGINCONNECTING object:nil];\n    // 开始同步\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(beginSynchronous) name:KBEGINSYNCHRONOUSDATA object:nil];\n    // 正在同步\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(beginSynchronous) name:KBEINGSYNCHRONOUSDATA object:nil];\n    // 完成同步\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(completeSynchronous) name:KENDSYNCHRONOUSDATA object:nil];\n    // 搜了三次没搜到\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(connectBluetooth) name:KTRYCONNECTINGFAIL object:nil];\n    \n    \n    // 请求新版本信息及手环运行参数\n    [self getAppversionAndParams];\n    \n    // 是否需要APP升级,如果不需要升级则连接手环\n    [self WhetherUpdate];\n    \n    // 获取心率最大最小值\n    //[self getHeartrateValue];\n    \n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    \n    [self getStepsData]; // 获取步数\n    [self changeYesterdaySleepViewWithSleep]; // 获取昨天到今天的睡眠数据\n}\n\n\n- (void)WhetherUpdate\n{\n//     NSString *localAppVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@\"Appversion\"];\n//     NSString * serverAppVersion = [AccountTool sharedAccountTool].account.app_version;\n//    \n//    if ([serverAppVersion isEqualToString:@\"\"]) // 服务器APP版本\n//    {\n    \n        // 开始连接设备，有可能内存侧漏\n        \n        if ([[AccountTool sharedAccountTool].account.has_device isEqualToString:@\"\"])\n        {\n            // 未绑定提示框，提示绑定\n            self.promprframeview.hidden = NO;\n            self.promprframeview.promptState = PromptStateConnectBluetooth;\n            \n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"提示\" message:@\"您还未绑定手环，是否马上绑定？\" delegate:self cancelButtonTitle:nil otherButtonTitles:@\"绑定\",@\"取消\", nil];\n            alert.tag = 99;\n            [alert show];\n            \n        }\n        else\n        {\n            // 开始连接蓝牙设备\n            [self performSelector:@selector(autoDelayConnectedBleDevice)\n                       withObject:nil\n                       afterDelay:3];\n\n        }\n\n//        return;\n//    }\n//    \n//    if ([[SystemManager sharedManager] compareVersion:serverAppVersion localVersion:localAppVersion] == 1)\n//    {\n//        BOOL forceupdate = [AccountTool sharedAccountTool].account.is_force;\n//        NSString * updateinfo = [AccountTool sharedAccountTool].account.update_info;\n//        // 强制升级\n//        if (forceupdate == YES)\n//        {\n//            // 提示有新版本\n//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"版本升级\" message:updateinfo delegate:self cancelButtonTitle:nil otherButtonTitles:@\"现在升级\", nil];\n//            alert.tag = 300;\n//            [alert show];\n//            \n//        } else { // 可选择是否升级\n//            \n//            // 提示有新版本\n//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"版本升级\" message:updateinfo delegate:self cancelButtonTitle:nil otherButtonTitles:@\"以后再说\",@\"现在升级\", nil];\n//            alert.tag = 200;\n//            [alert show];\n//        }\n//    }\n//    else\n//    {\n//        //无新版本，不需升级\n//        if ([[AccountTool sharedAccountTool].account.has_device isEqualToString:@\"\"])\n//        {\n//            // 未绑定提示框，提示绑定\n//            self.promprframeview.hidden = NO;\n//            self.promprframeview.promptState = PromptStateConnectBluetooth;\n//            \n//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"提示\" message:@\"您还未绑定手环，是否马上绑定？\" delegate:self cancelButtonTitle:nil otherButtonTitles:@\"绑定\",@\"取消\", nil];\n//            alert.tag = 99;\n//            [alert show];\n//            \n//        }\n//        else\n//        {\n//            [self performSelector:@selector(autoDelayConnectedBleDevice)\n//                       withObject:nil\n//                       afterDelay:3];\n//            \n//        }\n//\n//\n//    }\n    \n    \n}\n\n// 开始连接蓝牙设备\n- (void)autoDelayConnectedBleDevice\n{\n    [self beginConnectDevice];\n}\n\n// 请求新版本信息及手环运行参数\n- (void)getAppversionAndParams\n{\n    // 请求新版本及最新手环运行参数 fixme cp im 亲友该在那里调用\n    NSString * hardmodel = [AccountTool sharedAccountTool].account.device_hardware_revision; // 硬件型号\n    if ([hardmodel isEqualToString:@\"\"])\n    {\n        hardmodel = nil;\n    }\n    NSString * fireversion = [AccountTool sharedAccountTool].account.device_firmware_revision; // 固件版本\n    if ([fireversion isEqualToString:@\"\"])\n    {\n        fireversion = nil;\n    }\n    NSString * dvid = [AccountTool sharedAccountTool].account.has_device;\n    NSString * userid = [AccountTool sharedAccountTool].account.userId;\n    \n    \n    if (dvid && userid && hardmodel && fireversion)\n    {\n        // 固件与APP版本升级,获得手环运行参数\n        [LoadHelp versionAndParamUpdateWithUserId:userid DeviceId:dvid DeviceModel:hardmodel FireworkVersion:fireversion callback_success:^(com::pan::medicare::common::model::MedicalResponse * data)\n         {\n             std::string error_code = data->error_code().c_str();\n             data->PrintDebugString();\n             if (error_code == ERR_CODE_0000)\n             {\n                 if (data->has_device())\n                 {\n                     const MedicalResponse_Device & device = data->device();\n                     if (device.has_hardware_version() && device.has_firmware_version())\n                     {\n                         // 创建固件文件夹 硬件型号做为文件夹名\n                         NSString * mainname = [NSString stringWithUTF8String:device.hardware_version().c_str()];\n                         NSString * subname = [NSString stringWithUTF8String:device.firmware_version().c_str()];\n                         // 创建\n                         NSString * dirname = [[SystemManager sharedManager] createDirWithName:mainname];\n                         \n                         //读取文件夹中的文件\n                         NSArray *filenames = [[SystemManager sharedManager] getFileNamesInPath:dirname filterString:@\"bin\"];\n                         BOOL writeVersion = NO;\n                         if ([filenames count] == 0)\n                         {\n                             writeVersion = YES;\n                         }\n                         else\n                         {\n                             NSString * filename = [filenames objectAtIndex:0];\n                             //分离硬件型号与固件版本号\n                             NSArray * component = [[SystemManager sharedManager] retrieveModelAndFireware:filename];\n                             NSString * srcFirewareVersion = nil;\n                             if ([component count] == 2)\n                             {\n                                 srcFirewareVersion = [component objectAtIndex:1];\n                             }\n                             \n                             if (srcFirewareVersion == nil)\n                             {\n                                 writeVersion = YES;\n                             }\n                             else\n                             {\n                                 \n                                 if ([[SystemManager sharedManager] compareVersion:subname localVersion:srcFirewareVersion] == 1)\n                                 {\n                                     //subname 版本高于 srcFirewareVersion\n                                     writeVersion = YES;\n                                 }\n                             }\n                         }\n                         if (writeVersion == YES)\n                         {\n                             //写入新版本固件\n                             int firewaresize = device.firmware_size();\n                             char * buffer = new char[firewaresize + 1];\n                             buffer[firewaresize] = 0;\n                             if (firewaresize != 0)\n                             {\n                                 for (int i = 0; i < firewaresize; i++)\n                                 {\n                                     buffer[i] = (char)device.firmware(i);\n                                 }\n                             }\n                             //写到文件中\n                             NSData * datas = [NSData dataWithBytes:buffer length: firewaresize];\n                             NSString * fname = [NSString stringWithFormat:@\"%@_%@\",mainname,subname];\n                             [[SystemManager sharedManager] deleteAllFilesAtPath:dirname];\n                             [[SystemManager sharedManager] writeFirewareWithPath:dirname Name:fname Data:datas];\n                             \n                         }\n                         \n                         \n                     }\n                 }\n                 \n                 //APP版本更新\n                 if (data->has_appinfo())\n                 {\n                     const AppInfo &appinfo = data->appinfo();\n                     NSString *app_version ;\n                     NSString *update_info;\n                     NSString *update_url;\n                     BOOL is_force = NO;\n                     if (appinfo.has_app_version())\n                     {\n                         app_version = [NSString stringWithFormat:@\"%s\",appinfo.app_version().c_str()];\n                         [AccountTool sharedAccountTool].account.app_version = app_version;\n                     }\n                     if (appinfo.has_update_info())\n                     {\n\n                         update_info = [NSString stringWithUTF8String: appinfo.update_info().c_str()];\n                        [AccountTool sharedAccountTool].account.update_info = update_info;\n                     }\n                     if (appinfo.has_update_path())\n                     {\n                         update_url = [NSString stringWithFormat:@\"%s\",appinfo.update_path().c_str()];\n                         [AccountTool sharedAccountTool].account.update_url = update_url;\n                     }\n                     if (appinfo.has_is_force())\n                     {\n                         is_force = appinfo.is_force();\n                         [AccountTool sharedAccountTool].account.is_force = is_force;\n                     }\n                     \n                     [[AccountTool sharedAccountTool] saveData];\n                 }\n                 //手环运行参数\n\n                 //当前最新的数据时间\n                 long long servertime_step = 0;\n                 long long servertime_heartrate = 0;\n                 long long servertime_sleep = 0;\n                 {\n                     NSData * config = [AccountTool sharedAccountTool].account.configture;\n                     \n                     Byte *retByte = (Byte *)[config bytes];\n                     NSUInteger retLength = [config length];\n                     Configuration configture;\n                     configture.ParseFromArray(retByte, (int)retLength);\n                     Configuration_DataUpdateTime dataupdatetime = configture.dataupdatetime();\n                     \n                     if (dataupdatetime.has_heart_rate_time())\n                     {\n                         servertime_heartrate = dataupdatetime.heart_rate_time();\n                     }\n                     \n                     \n                     if (dataupdatetime.has_sleep_time())\n                     {\n                         servertime_sleep = dataupdatetime.sleep_time();\n                     }\n                     if (dataupdatetime.has_step_time())\n                     {\n                         servertime_step = dataupdatetime.step_time();\n                     }\n                 }\n                 \n                 //服务端最新的配置文件\n                 const Configuration & config = data->configuration();\n                 int length = config.ByteSize();\n                 char* buf = new char[length + 1];\n                 buf[length] = 0;\n                 config.SerializeToArray(buf,length);\n                 NSData* senddata = [[NSData alloc] initWithBytes:buf length:length];\n                 delete buf;\n                 buf = 0;\n                 [AccountTool sharedAccountTool].account.configture = senddata;\n                 [[AccountTool sharedAccountTool] saveData];\n                 \n                 //保存最新时间\n                 [[SystemManager sharedManager] updateConfigtureDataupdatetimeWithStepTime:servertime_step SleepTime:servertime_sleep HeartrateTime:servertime_heartrate];\n                 \n             }\n             \n         } callback_fail:^(NSError * error)\n         {\n            \n         }];\n    }\n}\n\n\n\n// 开始连接设备\n- (void)beginConnectDevice\n{\n\n\n       //连接手环，如已连接，不处理\n        if ([qBleClient sharedInstance].isConnecting == NO && [[qBleClient sharedInstance] peripheralConnected] == NO)\n        {\n            //发起连接\n            [qBleClient sharedInstance].reScanTime = 0;\n            [qBleClient sharedInstance].isConnecting = YES;\n            [[qBleClient sharedInstance] automaticConnect];\n        }\n    //}\n    \n   \n}\n\n\n// 主页，导航栏按钮/状态它连接按钮，点击连接设备\n- (void)beginConnectDeviceInMainView\n{\n    if ([[AccountTool sharedAccountTool].account.has_device isEqualToString:@\"\"])\n    {\n\n        // 未绑定提示框，提示绑定\n        self.promprframeview.hidden = NO;\n        self.promprframeview.promptState = PromptStateConnectBluetooth;\n\n        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"提示\" message:@\"您还未绑定手环，是否马上绑定？\" delegate:self cancelButtonTitle:nil otherButtonTitles:@\"绑定\",@\"取消\", nil];\n        alert.tag = 99;\n        [alert show];\n\n    }\n    else\n    {\n    \n\n        // 连接手环，如已连接，不处理\n        NSLog(@\"isconnecting   %d\",[qBleClient sharedInstance].isConnecting);\n        NSLog(@\"peripheralConnected   %d\",[[qBleClient sharedInstance] peripheralConnected]);\n        if ([qBleClient sharedInstance].isPowerOn == NO)\n        {\n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"提示\" message:@\"蓝牙未打开,请到设置中打开蓝牙！\" delegate:self cancelButtonTitle:nil otherButtonTitles:@\"确定\", nil];\n            alert.tag = 400;\n            [alert show];\n        }\n        else\n        {\n            if ([qBleClient sharedInstance].isConnecting == NO && [[qBleClient sharedInstance] peripheralConnected] == NO)\n            {\n                \n                //发起连接\n                [qBleClient sharedInstance].reScanTime = 0;\n                [qBleClient sharedInstance].isConnecting = YES;\n                [[qBleClient sharedInstance] automaticConnect];\n            }\n        }\n    }\n    \n}\n\n#pragma mark - 提示框代理方法\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    if (alertView.tag == 99) // 提示未绑定\n    {\n        if (buttonIndex == 0)\n        {\n           //绑定\n            AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n            [appTo changeBluetoothRootViewController];\n            \n        }\n\n    } else if (alertView.tag == 200) { // 已经注释了(app版本升级)\n        \n        if (buttonIndex == 1) {\n            // 现在升级\n            NSString *updataLink = [AccountTool sharedAccountTool].account.update_url;\n            // 打开URL去下载\n            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:updataLink]];\n        }\n        else\n        {\n            // 无新版本，不需升级\n            // 开始连接设备，有可能内存侧漏\n            [self beginConnectDeviceInMainView];\n        }\n    }\n    else if (alertView.tag == 300) { // 已经注释了(app版本升级)\n        \n        // 现在升级\n        NSString *updataLink = [AccountTool sharedAccountTool].account.update_url;\n        // 打开URL去下载\n        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:updataLink]];\n    }\n    else if (alertView.tag == 400) { // 蓝牙未打开，去往设置蓝牙\n        \n        NSURL *url = [NSURL URLWithString:@\"prefs:root=Bluetooth\"];\n        if ([[UIApplication sharedApplication] canOpenURL:url]) {\n            [[UIApplication sharedApplication] openURL:url];\n        }\n        \n    } else if (alertView.tag == 777) { // 正在进行测试，是否断开的提示框\n        \n        if (buttonIndex == 1) {\n            \n            [self mainViewControllerDidFinishLaunching];\n            \n            if (self.button) {\n                [self allButtonActionWithSubButton:self.button];\n            }\n            \n        }\n    }\n    \n}\n\n\n// 获取心率最大最小值\n- (void)getHeartrateValue {\n   \n    [LoadHelp HeartRateQueryParamUserId:[AccountTool sharedAccountTool].account.userId callback_success:^(MedicalResponse *data) {\n         std::string err_code = data->error_code();\n        if (err_code == ERR_CODE_0000) {\n            const HealthReport & healthreport = data->healthreport();\n            int len = healthreport.result_size();\n            \n            NSString *str_wave = @\"0\";\n            \n            for (int i=0; i<len; i++) {\n                const HealthReport_Result & result = healthreport.result(i);\n                const HealthReport_Data & data = result.data();\n                \n                int size = data.heart_rate_size();\n                \n                for (int j=0; j<size; j++) {\n                    const HealthReport_Data_HeartRate & heart_rate = data.heart_rate(j);\n                    std::string wave = heart_rate.wave_distance();\n                    str_wave = [NSString stringWithFormat:@\"%s,%@\",wave.c_str(),str_wave];\n                    \n                }\n            }\n            \n            if (![str_wave isEqualToString:@\"0\"]) {\n                NSArray *arr = [str_wave componentsSeparatedByString:@\",\"];\n                NSString *man_wave = arr[0];\n                NSString *min_wave = arr[0];\n                \n                for (int k=0; k<arr.count; k++) {\n                    \n                    if ([man_wave floatValue] < [arr[k] floatValue]) {\n                        man_wave = arr[k];\n                    }\n                    \n                    if ([min_wave floatValue] > [arr[k] floatValue] ) {\n                        \n                        if ([arr[k] floatValue] != 0) {\n                            min_wave = arr[k];\n                        }\n                        \n                    }\n                    \n                }\n                \n                int min_heart_rate = 60000 / [man_wave floatValue];\n                int man_heart_rate = 60000 / [min_wave floatValue];\n                [self.heartRateV changeHeartRateWithMax:man_heart_rate min:min_heart_rate base:0];\n            }\n\n        }\n        \n    } callback_fail:^(NSError *err) {\n        \n    }];\n   \n\n}\n\n// 数据同步关闭按钮用户交互\n- (void)dataSynchronous {\n    self.heartRateV.btn_start.userInteractionEnabled = NO;\n    self.cprV.btn_start.userInteractionEnabled = NO;\n    self.bloodPressureV.btn_start.userInteractionEnabled = NO;\n}\n\n\n#pragma mark ------通知调用的方法------\n\n/**\n *  收到完成同步数据通知\n */\n- (void)completeSynchronous {\n    \n    self.otherItem.image = [UIImage imageNamed:@\"image_connect\"];\n    self.promprframeview.hidden = NO;\n    self.promprframeview.promptState = PromptStateCompleteSynchronization;\n    [self performSelector:@selector(disappearPromptFrameView) withObject:nil afterDelay:2];\n    \n}\n\n-(void)disappearPromptFrameView\n{\n    if (self.promprframeview.promptState == PromptStateCompleteSynchronization) {\n            self.promprframeview.hidden = YES;\n        [self userInteractionEnabled_main:YES];\n        // 同步完成，更新睡眠数据页面\n        [self changeYesterdaySleepViewWithSleep];\n    }\n}\n\n/**\n *  收到开始同步数据通知\n */\n- (void)beginSynchronous {\n    self.promprframeview.hidden = NO;\n    self.promprframeview.promptState = PromptStateSynchronization;\n}\n\n/**\n *  收到查找蓝牙通知\n */\n- (void)beingBluetooth {\n    self.promprframeview.hidden = NO;\n    self.promprframeview.promptState = PromptStateBeingConnected;\n    self.otherItem.image = [UIImage imageNamed:@\"image_break\"];\n}\n\n/**\n *  收到蓝牙搜三次没搜到的通知\n */\n- (void)connectBluetooth {\n  \n    self.promprframeview.hidden = NO;\n    self.promprframeview.promptState = PromptStateConnectBluetooth;\n    self.otherItem.image = [UIImage imageNamed:@\"image_break\"];\n}\n\n/**\n *  收到电量通知\n */\n- (void)chanageElectricity:(NSNotification *)notify {\n    [AccountTool sharedAccountTool].account.device_electricity = notify.userInfo[KBETTERYCOUNT];\n    [[AccountTool sharedAccountTool] saveData];\n}\n\n\n-(void)synchnorousCompleted:(NSNotification*)notify // 已注释\n{\n    //self.otherItem.image = [UIImage imageNamed:@\"image_blu_available\"];\n    //NSLog(@\"广播接收同步数据完成: %@\",notify.userInfo);\n}\n\n/**\n *  实时接收数据\n */\n- (void)realtimeData:(NSNotification *)notification_data {\n    // 温度\n    NSString *temp = notification_data.userInfo[KTEMPRATURE];\n    if ([temp intValue] > -100 && [temp intValue] < 100 ) {\n        \n        [AccountTool sharedAccountTool].account.temperature = temp;\n//        [[AccountTool sharedAccountTool] saveData];\n    }else {\n        temp = @\"37\";\n    }\n    \n    // 湿度\n    NSString *hum = notification_data.userInfo[KDAMPNESS];\n    if ([hum intValue] > 0 && [hum intValue] < 100) {\n        \n        [AccountTool sharedAccountTool].account.humidity = hum;\n        //[[AccountTool sharedAccountTool] saveData];\n    }else {\n        hum = @\"50\";\n    }\n    \n    // 步数/温度/湿度\n    [self changeStepsRoundViewWithStep:notification_data.userInfo[KTOTALSTEP] Temperature:temp humidity:hum];\n    \n    self.today_steps = notification_data.userInfo[KTOTALSTEP];\n    \n    // 心率\n    if (self.measurementType == MeasurementTypeHeartRate) {\n        \n        self.heartrate = notification_data.userInfo[KHEARTRATE];\n        \n        if (![self.heartrate isEqualToString:@\"0\"]) {\n            //[self.heartrateArray addObject:notification_data.userInfo[KHEARTRATE]];  // 收集心率值，求平均值\n            [self changeHeartRateViewWithHeartRate:self.heartrate];\n            \n        } else {\n            [self.heartRateV changeIsMeasure];\n        }\n    }\n    \n    // **********开始测量心肺**********\n    \n    if (self.measurementType == MeasurementTypeCPR) {\n        // 返回为NO的时候，结束测量，测量失败\n        if (![self.cprAlgorithm receiveHeartRate:notification_data.userInfo[KHEARTRATE]]) { \n            [self.cprAlgorithm endMeasureCPR];\n            [self.cprV measurementsEndEnough];\n        }\n    }\n    \n    // *******结束*******\n    \n}\n\n/**\n *  收到蓝牙断开通知\n */\n- (void)changeOtherItem_disconnect\n{\n    self.otherItem.image = [UIImage imageNamed:@\"image_break\"];\n    \n    if (![[AccountTool sharedAccountTool].account.has_device isEqualToString:@\"\"]) {\n        self.promprframeview.hidden = NO;\n        self.promprframeview.promptState = PromptStateConnectBluetooth;\n        //界面复位、关闭测试指令\n        [self mainViewControllerDidFinishLaunching];\n        // 判断是否是OTA更新\n        if ([qBleClient sharedInstance].otaupgrade) { // 更新状态\n            [[qBleClient sharedInstance].alterview removeFromSuperview]; // 蓝牙断开，移除提示框\n        }\n        \n    }\n    [self userInteractionEnabled_main:NO];\n    \n}\n\n// 更改导航栏右边图标\n- (void)changeOtherItem_available {\n\n    self.otherItem.image = [UIImage imageNamed:@\"image_connect\"];\n}\n\n// 血压测试结果通知\n- (void)readBloodData:(NSNotification *)tification {\n    if (self.measurementType == MeasurementTypeBloodPressure) {\n        self.measurementType = MeasurementTypeNormal;\n        NSString *result = @\"\";\n        \n        switch ([tification.userInfo[KBLOODRESULT] integerValue] ) {\n            case 0:\n                result = @\"正常\";\n                break;\n            case 1:\n                result = @\"偏低\";\n                break;\n            case 2:\n                result = @\"偏高\";\n                break;\n            default:\n                break;\n        }\n        int sbp = [tification.userInfo[KBLOODSBP] intValue];\n        int dbp = [tification.userInfo[KBLOODDBP] intValue];\n        \n        if ([tification.userInfo[KBLOODINVALIDE] integerValue] == 0) {\n        \n            if (sbp < 60) {\n                [self.bloodPressureV change_BP_state]; // 测量失败\n                \n            }else if (dbp < 40) { // 测量失败\n                [self.bloodPressureV change_BP_state];\n                \n            }else { // 测量成功\n                // 修改界面显示\n                [self.bloodPressureV change_BP_state:result sbp:sbp dbp:dbp];\n                // 获取当前时间\n                TimeStamp *ts = [[TimeStamp alloc] initWithNow];\n                // 数据转BloodPressureData对象\n                BloodPressureData *bloodp = [[BloodPressureData alloc] initWithBloodPressureData:ts sbp:[NSString stringWithFormat:@\"%d\",sbp] dbp:[NSString stringWithFormat:@\"%d\",dbp] result:result];\n                // 数据插入数据库\n                [[SQLOperate sharedSqlOperate] insertBloodPressure:bloodp];\n            }\n            \n        }else {\n            [self.bloodPressureV change_BP_state];// 测量失败\n        }\n\n    }else {\n        [self.bloodPressureV change_BP_state];\n    }\n    \n}\n\n// 移除通知\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n\n}\n\n\n#pragma mark - 页面的代理方法\n // 左\n- (void)toLeft_StepsRound {\n    [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width*4, 0) animated:NO];\n    [self getButtonsWithIndex:4];\n}\n- (void)toLeft_YesterdaySleep {\n    [self.scrollView setContentOffset:CGPointMake(0, 0) animated:NO];\n    [self getButtonsWithIndex:0];\n}\n- (void)toLeft_HeartRate {\n    [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width, 0) animated:NO];\n    [self getButtonsWithIndex:1];\n}\n- (void)toLeft_CPRView {\n    [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width*2, 0) animated:NO];\n    [self getButtonsWithIndex:2];\n}\n- (void)toLeft_BloodPressureView {\n    [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width*3, 0) animated:NO];\n    [self getButtonsWithIndex:3];\n}\n // 右\n- (void)toRight_StepsRound {\n    [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width, 0) animated:NO];\n    [self getButtonsWithIndex:1];\n}\n- (void)toRight_YesterdaySleep {\n    [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width*2, 0) animated:NO];\n    [self getButtonsWithIndex:2];\n}\n- (void)toRight_HeartRate {\n    [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width*3, 0) animated:NO];\n    [self getButtonsWithIndex:3];\n}\n- (void)toRight_CPRView {\n    [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width*4, 0) animated:NO];\n    [self getButtonsWithIndex:4];\n}\n- (void)toRight_BloodPressureView {\n    [self.scrollView setContentOffset:CGPointMake(0, 0) animated:NO];\n    [self getButtonsWithIndex:0];\n}\n\n// 跳转到测量记录的代理方法\n- (void)toTelemetry:(UIButton *)sender {\n    [self allButtonActionWithSubButton:sender];\n}\n\n// 跳转到步数详情\n- (void)toStepHistogram {\n    StepHistogramViewController *stepHVC = [[StepHistogramViewController alloc] init];\n    stepHVC.today_steps = self.today_steps;\n    [self.navigationController pushViewController:stepHVC animated:NO];\n}\n// 跳转到睡眠柱状图\n- (void)toSleepHistogram {\n    SleepShowViewController *sleepShowVC = [[SleepShowViewController alloc]init];\n    [self.navigationController pushViewController:sleepShowVC animated:NO];\n}\n// 跳转到心率详情\n- (void)toHeartRateHistogram:(UIButton *)sender {\n    [self allButtonActionWithSubButton:sender];\n}\n// 跳转到血压详情\n- (void)toShowBloodPressure:(UIButton *)sender {\n    [self allButtonActionWithSubButton:sender];\n}\n\n- (void)getButtonsWithIndex:(NSUInteger)index {\n    self.view_tag = (int)index;\n    for (int i = 0; i<5; i++) {\n        UIButton *btn = (UIButton *)[self.view viewWithTag:i+10];\n        if (btn.tag == index+10) {\n            UIImage *image = self.arr_image[i][@\"0\"];\n            image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n            [btn setImage:image forState:UIControlStateNormal];\n            btn.backgroundColor = [UIColor whiteColor];\n        }else{\n            UIImage *image = self.arr_image[i][@\"1\"];\n            image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n            [btn setImage:image forState:UIControlStateNormal];\n            btn.backgroundColor = [UIColor colorWithWhite:0.925 alpha:1.000];\n        }\n    }\n}\n\n#pragma mark - CPRAlgorithmDelegate\n\n/**\n *  测量心肺成功\n */\n- (void)conclusion:(NSString *)conclusion CPR:(int)cpr {\n    [self.cprAlgorithm endMeasureCPR];\n    [self.cprV animationWithStrokeWidth:1];\n    // 到View上更新显示数据\n    [self.cprV measurementsEnd:[NSString stringWithFormat:@\"%d\",cpr] pcr_result:conclusion];\n    \n    TimeStamp *ts = [[TimeStamp alloc] initWithNow];// 获取当前时间\n    \n    CPRData *cprD = [[CPRData alloc] initWithCPRData:ts heartrate:[NSString stringWithFormat:@\"%d\",cpr] result:conclusion];\n    // 心肺数据插入数据库\n    [[SQLOperate sharedSqlOperate] insertCPR:cprD];\n   \n}\n\n// 画心肺圆\n- (void)refresh {\n    \n    int testTime = [DeviceConfig sharedDeviceConfigInstace].heart_lung_time;\n    \n    if (testTime <= 0) {\n        testTime = 4;\n    }\n    double ms = (double)1 / (testTime * 60);\n    [self.cprV animationWithStrokeWidth:ms];\n}\n\n/**\n *  开始测量心肺的按钮的点击事件\n */\n- (void)srateMeasurementsCPR {\n    \n    self.measurementType = MeasurementTypeCPR;\n    \n    int testTime = [DeviceConfig sharedDeviceConfigInstace].heart_lung_time;\n    [[qBleClient sharedInstance] startMonitorHeartLung:YES During:testTime];  // 开始 心肺\n    \n    // 设置测量过程屏幕常亮\n    [[UIApplication sharedApplication] setIdleTimerDisabled:YES];\n    \n    [self.cprAlgorithm startMeasureCPR];  // 开始计算计时\n    \n    AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    [appTo.leftSlideVC setPanEnabled:NO];\n    self.scrollView.userInteractionEnabled = YES;\n    self.scrollView.scrollEnabled = NO;\n    self.cprV.userInteractionEnabled = YES;\n}\n\n/**\n *  放弃测量心肺的按钮的点击事件\n */\n- (void)openUserWithCPR {\n    self.measurementType = MeasurementTypeNormal;\n    [self.cprAlgorithm endMeasureCPR];\n    \n    int testTime = [DeviceConfig sharedDeviceConfigInstace].heart_lung_time;\n    [[qBleClient sharedInstance] startMonitorHeartLung:NO During:testTime];  // 结束 心肺\n    // 设置测量结束关闭屏幕常亮\n    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];\n    \n    AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    [appTo.leftSlideVC setPanEnabled:YES];\n\n    self.scrollView.scrollEnabled = YES;\n\n}\n\n/**\n *  心率测量时关闭用户交互\n */\n- (void)closeUser {\n    \n    [[qBleClient sharedInstance] switchRealHeartRate:YES]; // 心率测量\n    // 设置测量过程屏幕常亮\n    [[UIApplication sharedApplication] setIdleTimerDisabled:YES];\n    self.measurementType = MeasurementTypeHeartRate;\n    \n    AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    [appTo.leftSlideVC setPanEnabled:NO];\n    \n//    for (UIView *view in self.view.subviews ) {\n//        view.userInteractionEnabled = NO;\n//    }\n    self.scrollView.userInteractionEnabled = YES;\n    self.scrollView.scrollEnabled = NO;\n//    self.heartRateV.userInteractionEnabled = YES;\n//    self.heartRateV.btn_start.userInteractionEnabled = YES;\n//    [self.delegate_MainViewController close_userInteractionEnabled];\n}\n\n/**\n *  结束心率测量时，开启用户交互(完成/放弃)\n *  isu  是否是放弃测量(NO为放弃测量/YES为测量成功)\n */\n- (void)openUser:(BOOL)isu {\n    \n    [[qBleClient sharedInstance] switchRealHeartRate:NO];\n    // 设置测量结束关闭屏幕常亮\n    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];\n    \n    self.measurementType = MeasurementTypeNormal;\n    if (isu) {\n        /*   以下是计算心率的数据有效性，如果有效就求平均值\n        if ([self if_cal_heart_rate:self.heartrateArray] != 0) {\n\n            int heartrate = 0;\n            for (NSString *heartStr in self.heartrateArray) {\n                heartrate += [heartStr intValue];\n            }\n            int avg = heartrate / self.heartrateArray.count;\n            [self changeHeartRateViewWithHeartRate:[NSString stringWithFormat:@\"%d\",avg]];\n        }else {\n            [self showPromptViewController];\n            [self.heartRateV removeLayer];\n        }\n         */\n        \n        if ([self.heartrate isEqualToString:@\"0\"]) {\n            [self showPromptViewController];\n            [self.heartRateV defaultInterface];\n        }\n        \n    }\n    \n   // self.isUser = YES;\n    \n    AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    [appTo.leftSlideVC setPanEnabled:YES];\n    \n//    for (UIView *view in self.view.subviews ) {\n//        view.userInteractionEnabled = YES;\n//    }\n    self.scrollView.scrollEnabled = YES;\n//    [self.delegate_MainViewController open_userInteractionEnabled];\n}\n\n// 返回心率值是否有效(0为无效)\n- (int)if_cal_heart_rate:(NSMutableArray *)array {\n    if (array.count < 20) {\n        return 0;\n    }\n    uint16_t *hr = new uint16_t[21];\n    hr[20] = 0;\n    for (int i=0; i<20; i++) {\n        int h = [array[i] intValue];\n        hr[i] = (uint16_t)h;\n    }\n    int rel = if_cal_heart_rate(hr,20,10,80);\n    return rel;\n}\n\n/**\n *  @author zl, 15-12-14 09:12:37\n *\n *  判断测量功能，并结束\n */\n- (void)mainViewControllerDidFinishLaunching {\n    \n    if (self.measurementType == MeasurementTypeHeartRate) {\n        \n        [self.heartRateV abandonHeartRate]; // 放弃测量心率\n        \n    }else if (self.measurementType == MeasurementTypeCPR) {\n        \n        [self.cprV measurementsEnd:@\"0\" pcr_result:@\"\"]; // 结束测量心肺\n        \n    }else if (self.measurementType == MeasurementTypeBloodPressure) {\n        \n        [self.bloodPressureV abandonBloodPressure]; // 放弃测量血压\n        \n    }else if (self.measurementType == MeasurementTypeNormal) {\n        \n        if (self.cprV.isAlert) {\n            [self.cprV measurementsEnd:@\"0\" pcr_result:@\"\"];\n        }\n        \n//        [self.heartRateV removeLayer];\n//        [self.cprV removeLayer];\n//        [self.bloodPressureV removeLayer];\n    }\n    \n}\n\n#pragma mark - PromptFrameViewDelegate代理方法\n\n// 连接按钮点击代理方法\n- (void)clickConnect {\n    \n    [self beginConnectDeviceInMainView];\n}\n\n#pragma mark - 血压代理方法\n\n/**\n *  开始测量血压\n */\n- (void)startMeasureBloodPressure {\n    \n    [[qBleClient sharedInstance] switchBloodMonitor:YES]; // 测量开关\n    // 设置测量过程屏幕常亮\n    [[UIApplication sharedApplication] setIdleTimerDisabled:YES];\n    self.measurementType = MeasurementTypeBloodPressure;\n    \n//    self.isUser = NO;\n    AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    [appTo.leftSlideVC setPanEnabled:NO];\n    \n//    for (UIView *view in self.view.subviews ) {\n//        view.userInteractionEnabled = NO;\n//    }\n    self.scrollView.userInteractionEnabled = YES;\n    self.scrollView.scrollEnabled = NO;\n    self.bloodPressureV.userInteractionEnabled = YES;\n    \n//    [self.delegate_MainViewController close_userInteractionEnabled];\n}\n\n/**\n *  结束测量血压\n *\n *  @param ismeasure YES失败 NO成功\n */\n- (void)endMeasureBloodPressure:(BOOL)ismeasure {\n    \n    [[qBleClient sharedInstance] switchBloodMonitor:NO]; // 测量开关\n    // 设置测量结束关闭屏幕常亮\n    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];\n    \n//    if (self.measurementType == MeasurementTypeBloodPressure) {\n//        \n//        [self.bloodPressureV removeLayer];\n//    }\n    self.measurementType = MeasurementTypeNormal;\n    \n    if (ismeasure) {\n        [self showPromptViewController];\n    }\n    \n //   self.isUser = YES;\n    AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    [appTo.leftSlideVC setPanEnabled:YES];\n//    \n//    for (UIView *view in self.view.subviews ) {\n//        view.userInteractionEnabled = YES;\n//    }\n    self.scrollView.scrollEnabled = YES;\n//    [self.delegate_MainViewController open_userInteractionEnabled];\n}\n\n\n#pragma mark - 数据\n\n// 获取步数数据\n- (void)getStepsData {\n    \n    StepDayArray *sda = [[StepDayArray alloc] initWithStep];\n    \n    if ([self.today_steps intValue] > 0) {\n        \n        // 修改StepsRoundView显示的数据\n        [self changeStepsRoundViewWithStep:self.today_steps Temperature:@\"\" humidity:@\"\"];\n    }else {\n        [self changeStepsRoundViewWithStep:sda.totalStep Temperature:@\"\" humidity:@\"\"];\n    }\n    \n}\n\n\n#pragma mark - StepsRoundView的方法调用\n\n/**\n *  修改StepsRoundView显示的数据\n */\n- (void)changeStepsRoundViewWithStep:(NSString *)step Temperature:(NSString *)temperature humidity:(NSString *)humidity {\n    \n    // 步数\n    self.main_step = step;\n    NSString *goalSteps = [AccountTool sharedAccountTool].account.memGoalSteps;\n    [self.stepsRoundV changeNumberImage:step];\n    CGFloat width = [step floatValue] / [goalSteps floatValue];\n    [self.stepsRoundV animationWithStrokeWidth:width];\n    [self.stepsRoundV change_lbl_steps_2:step];\n    \n    NSString *height = [AccountTool sharedAccountTool].account.memberheight; // 必须有的(身高)\n    NSString *km = [MotionUtils distanceWithHeight:[height floatValue] step:[step intValue]]; // 计算走的距离\n    [self.stepsRoundV change_info_distance:km];\n    \n    NSString *cal = [MotionUtils stepToCalories:km]; // 计算千卡\n    [self.stepsRoundV change_info_Calorie:cal];\n    \n    NSString *time = [MotionUtils distanceConsumeTime:km]; // 计算耗时\n    [self.stepsRoundV change_info_time:time];\n    \n    [self.stepsRoundV change_lbl_text:[MotionUtils stepWithCalForText:km]];\n    self.main_step_text = [MotionUtils stepWithCalForText:km];\n    \n    [self.stepsRoundV changeWithTemperature:temperature humidity:humidity]; // 更改温度、湿度值\n}\n\n#pragma mark - YesterdaySleepView的方法调用\n\n/**\n *  修改YesterdaySleepView显示的数据\n */\n- (void)changeYesterdaySleepViewWithSleep {\n    \n    SleepArray *spa = [[SleepArray alloc] initWithSleep];\n    \n    if ([spa.spd_day.hour intValue] == 0 && [spa.spd_day.minute intValue] == 0) {\n        \n        [self.yesterdaySleepV changeViewWithNoData]; // 无数据，初始化界面\n        \n    } else {\n        \n        self.main_sleep_hour = spa.spd_day.hour;\n        self.main_sleep_minute = spa.spd_day.minute;  //self.spa.spd_day.lowSleep\n        self.main_sleep_text = [NSString stringWithFormat:@\"睡眠质量%@\",spa.spd_day.lowSleep];\n        [self.yesterdaySleepV changeSleepTimeWithDay:spa.spd_day quality:spa.spd_day.lowSleep];\n        CGFloat Width = (CGFloat)spa.spd_day.lowSleep_int / 100;\n        [self.yesterdaySleepV animationWithStrokeWidth:Width];\n    }\n}\n\n#pragma mark - HeartRateView显示的数据\n\n/**\n *  修改HeartRateView的数据\n */\n- (void)changeHeartRateViewWithHeartRate:(NSString *)heartrate {\n    [self.heartRateV changeNumberImage:heartrate];\n}\n\n#pragma mark - UIScrollViewDelegate\n// 滚动停顿调用的方法\n- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {\n    if (scrollView == self.scrollView) {\n        NSUInteger index = (int)scrollView.contentOffset.x/SCREEN_SIZE.width;\n        [self getButtonsWithIndex:index];\n    }\n}\n\n\n#pragma mark - 按钮点击事件\n\n// 关闭用户交互\n- (void)userInteractionEnabled_main:(BOOL)userInteractionEnabled {\n    \n    \n    \n    self.heartRateV.btn_start.userInteractionEnabled = userInteractionEnabled;\n    self.cprV.btn_start.userInteractionEnabled = userInteractionEnabled;\n\n    self.bloodPressureV.btn_start.userInteractionEnabled = userInteractionEnabled;\n    [self.bloodPressureV stopCoolBtnTimer];\n    [self.cprV stopCoolBtnTimer];\n    [self.heartRateV stopCoolBtnTimer];\n    \n    if (userInteractionEnabled) {\n        [self.heartRateV.btn_start setBackgroundImage:[UIImage imageNamed:@\"btn_folks_nor\"] forState:UIControlStateNormal];\n        [self.cprV.btn_start setBackgroundImage:[UIImage imageNamed:@\"btn_folks_nor\"] forState:UIControlStateNormal];\n        [self.bloodPressureV.btn_start setBackgroundImage:[UIImage imageNamed:@\"btn_folks_nor\"] forState:UIControlStateNormal];\n    }else {\n        [self.heartRateV.btn_start setBackgroundImage:[UIImage imageNamed:@\"btn\"] forState:UIControlStateNormal];\n        self.heartRateV.btn_start.backgroundColor = [UIColor grayColor];\n        [self.cprV.btn_start setBackgroundImage:[UIImage imageNamed:@\"btn\"] forState:UIControlStateNormal];\n        self.cprV.btn_start.backgroundColor = [UIColor grayColor];\n        [self.bloodPressureV.btn_start setBackgroundImage:[UIImage imageNamed:@\"btn\"] forState:UIControlStateNormal];\n        self.bloodPressureV.btn_start.backgroundColor = [UIColor grayColor];\n    }\n}\n\n// 主页步数，睡眠等按钮点击事件\n- (void)mainButtonAction:(UIButton *)seder {\n\n    for (int i = 0; i<5; i++) {\n        if (seder.tag == i+10) {\n            self.view_tag = i;\n            UIImage *image = self.arr_image[i][@\"0\"];\n            image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n            [seder setImage:image forState:UIControlStateNormal];\n            seder.backgroundColor = [UIColor whiteColor];\n            [self.scrollView setContentOffset:CGPointMake(SCREEN_SIZE.width*i, 0) animated:YES];\n        }else {\n            UIButton *btn = (UIButton *)[self.view viewWithTag:i+10];\n            UIImage *image = self.arr_image[i][@\"1\"];\n            image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n            [btn setImage:image forState:UIControlStateNormal];\n            btn.backgroundColor = [UIColor colorWithWhite:0.925 alpha:1.000];\n        }\n    }\n}\n\n// 测量过程中断提示是否断开\n- (void)allButtonActionWithSubButton:(UIButton *)sender {\n    // 判断是不是正在测试\n    if (self.measurementType != MeasurementTypeNormal) { // 在测试中\n        self.button = sender;\n        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@\"提示\" message:@\"测量正在进行，是否中断？\" delegate:self cancelButtonTitle:nil otherButtonTitles:@\"取消\",@\"确定\", nil];\n        alert.tag = 777;\n        [alert show];\n    }else { // 没有测试\n        if (sender.tag >9 && sender.tag < 15) { // 导航栏下面的按钮\n            [self mainButtonAction:sender];\n        }else if (sender.tag == 120) { // 心率界面\n            HeartRateShowViewController *heartRateShowVC = [[HeartRateShowViewController alloc] init];\n            [self.navigationController pushViewController:heartRateShowVC animated:NO];\n        }else if (sender.tag == 130) { // 心肺界面\n            TelemetryViewController *telementryVC = [[TelemetryViewController alloc] init];\n            [self.navigationController pushViewController:telementryVC animated:NO];\n        }else if (sender.tag == 140) { // 血压界面\n            BloodPressureShowViewController *bloodpVC = [[BloodPressureShowViewController alloc] init];;\n            [self.navigationController pushViewController:bloodpVC animated:NO];\n        }else if (sender.tag == 210) { // 导航栏左边按钮\n            AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n            [appTo.leftSlideVC openLeftView];\n        }else if (sender.tag == 310) { // 加号按钮\n            [self.delegate_MainViewController tabBarVCWithButton:sender];\n        }else if (sender.tag == 320) { // 分享按钮\n            [self.delegate_MainViewController tabBarVCWithButton:sender];\n        }else if (sender.tag == 300) { // 预警按钮\n            [self.delegate_MainViewController tabBarVCWithButton:sender];\n        }\n    }\n}\n\n\n\n#pragma mark - 创建导航栏按钮\n\n- (void)createNavigationButton {\n    \n    self.otherItem = [[UIBarButtonItem alloc] initWithImage:[[UIImage imageNamed:@\"image_break\"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal ] style:UIBarButtonItemStyleDone target:self action:@selector(otherItemAction:)];\n    [self.otherItem setImageInsets:UIEdgeInsetsMake(5, 5, 5, 5)];\n    self.tabBarController.navigationItem.rightBarButtonItem = self.otherItem;\n    \n    // 导航栏左边按钮\n    self.infoItem = [[UIBarButtonItem alloc]initWithImage:[[UIImage imageNamed:@\"left_info\"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal ] style:UIBarButtonItemStyleDone target:self action:@selector(infoItemAction:)];\n    self.tabBarController.navigationItem.leftBarButtonItem = self.infoItem;\n}\n\n#pragma mark - 导航栏按钮点击事件\n// 手环图标按钮点击事件\n- (void)otherItemAction:(UIBarButtonItem *)sender{\n    // 连接设备\n    [self beginConnectDeviceInMainView];\n}\n\n// 个人信息点击事件\n- (void)infoItemAction:(UIBarButtonItem *)sender {\n    \n    if (self.measurementType == MeasurementTypeNormal) { // 没有在测试\n        AppDelegate *appTo = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n        [appTo.leftSlideVC openLeftView];\n    }else { // 测试中\n        UIButton *btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n        btn.tag = 210;\n        [self allButtonActionWithSubButton:btn];\n    }\n}\n\n- (void)showPromptViewController {\n    PromptViewController *promptVC = [[PromptViewController alloc]init];\n    UIImage *image = [UIImage imageNamed:@\"gesture_imag\"];\n    [promptVC addBackgroundWithController:self.navigationController showImage:image title:@\"测量失败\" message:@\"请参考图中手环佩戴位置，测量时不要移动身体并保持放松，确保手环紧贴手臂。\"];\n}\n\n#pragma mark - 视图创建\n\n// 主页睡眠，步数等按钮\n- (void)createButtons {\n    UIView *buttonview ;\n    if (IOS_VERSION) {\n        buttonview = [[UIView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, SCREEN_SIZE.height*150/SIZE_HEIGHT)];\n    }else {\n        buttonview = [[UIView alloc]initWithFrame:CGRectMake(0, 64, self.view.frame.size.width, SCREEN_SIZE.height*150/SIZE_HEIGHT)];\n    }\n    \n    for (int i = 0; i<5; i++) {\n        UIButton *btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n        btn.frame = CGRectMake(BUTTON_WIDTH*i, 0, BUTTON_WIDTH,SCREEN_SIZE.height*150/SIZE_HEIGHT);\n        if (i == 0) {\n            UIImage *image = self.arr_image[i][@\"0\"];\n            image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n            [btn setImage:image forState:UIControlStateNormal];\n            btn.backgroundColor = [UIColor whiteColor];\n        }else{\n            UIImage *image = self.arr_image[i][@\"1\"];\n            image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n            [btn setImage:image forState:UIControlStateNormal];\n             btn.backgroundColor = [UIColor colorWithWhite:0.925 alpha:1.000];\n        }\n        btn.tag = i+10;\n        [btn addTarget:self action:@selector(allButtonActionWithSubButton:) forControlEvents:UIControlEventTouchUpInside];\n        [buttonview addSubview:btn];\n    }\n    \n    [self.view addSubview:buttonview];\n}\n\n#pragma mark - 懒加载\n\n- (StepsRoundView *)stepsRoundV {\n    if (!_stepsRoundV) {\n        NSString *goalSteps = [AccountTool sharedAccountTool].account.memGoalSteps;\n        StepDayArray *sda = [[StepDayArray alloc]initWithStep];\n        CGFloat width = [sda.totalStep floatValue] / [goalSteps floatValue];\n        _stepsRoundV = [[StepsRoundView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_SIZE.width, SCREEN_SIZE.height-(SCREEN_SIZE.height*150/SIZE_HEIGHT+self.tabBarController.tabBar.frame.size.height)) width:width];\n        _stepsRoundV.delegate_stepsRound = self;\n    }\n    return _stepsRoundV;\n}\n\n- (YesterdaySleepView *)yesterdaySleepV {\n    if (!_yesterdaySleepV) {\n        _yesterdaySleepV = [[YesterdaySleepView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_SIZE.width, self.view.frame.size.height-(SCREEN_SIZE.height*150/SIZE_HEIGHT+self.tabBarController.tabBar.frame.size.height)) width:0];\n        _yesterdaySleepV.delegate_yesterdaySleep = self;\n    }\n    return _yesterdaySleepV;\n}\n\n- (HeartRateView *)heartRateV {\n    if (!_heartRateV) {\n        _heartRateV = [[HeartRateView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_SIZE.width, self.view.frame.size.height-(SCREEN_SIZE.height*150/SIZE_HEIGHT+self.tabBarController.tabBar.frame.size.height))];\n        _heartRateV.delegate_heartRate = self;\n    }\n    return _heartRateV;\n}\n\n- (CPRView *)cprV {\n    if (!_cprV) {\n        _cprV = [[CPRView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_SIZE.width, self.view.frame.size.height-(SCREEN_SIZE.height*150/SIZE_HEIGHT+self.tabBarController.tabBar.frame.size.height))];\n        _cprV.delegate_CPRView = self;\n    }\n    return _cprV;\n}\n\n- (BloodPressureView *)bloodPressureV {\n    if (!_bloodPressureV) {\n        _bloodPressureV = [[BloodPressureView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_SIZE.width, self.view.frame.size.height-(SCREEN_SIZE.height*150/SIZE_HEIGHT+self.tabBarController.tabBar.frame.size.height))];\n        _bloodPressureV.delegate_BloodPressureView = self;\n    }\n    return _bloodPressureV;\n}\n/**\n *  加载按钮图片的数组\n *\n *  @return 数组\n */\n- (NSArray *)arr_image {\n    if (!_arr_image) {\n        NSDictionary *dic_0 = [NSDictionary dictionaryWithObjectsAndKeys:[UIImage imageNamed:@\"btn_steps_0\"],@\"0\",[UIImage imageNamed:@\"btn_steps_1\"],@\"1\",nil];\n        NSDictionary *dic_1 = [NSDictionary dictionaryWithObjectsAndKeys:[UIImage imageNamed:@\"btn_sleep_0\"],@\"0\",[UIImage imageNamed:@\"btn_sleep_1\"],@\"1\",nil];\n        NSDictionary *dic_2 = [NSDictionary dictionaryWithObjectsAndKeys:[UIImage imageNamed:@\"btn_heartrate_0\"],@\"0\",[UIImage imageNamed:@\"btn_heartrate_1\"],@\"1\",nil];\n        NSDictionary *dic_3 = [NSDictionary dictionaryWithObjectsAndKeys:[UIImage imageNamed:@\"btn_heartlung_0\"],@\"0\",[UIImage imageNamed:@\"btn_heartlung_1\"],@\"1\",nil];\n        NSDictionary *dic_4 = [NSDictionary dictionaryWithObjectsAndKeys:[UIImage imageNamed:@\"btn_bloodpressure_0\"],@\"0\",[UIImage imageNamed:@\"btn_bloodpressure_1\"],@\"1\",nil];\n        _arr_image = [NSArray arrayWithObjects:dic_0,dic_1,dic_2,dic_3, dic_4,nil];\n    }\n    return _arr_image;\n}\n\n\n- (UIScrollView *)scrollView {\n    if (_scrollView == nil) {\n        if (IOS_VERSION) {\n            _scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, SCREEN_SIZE.height*150/SIZE_HEIGHT, SCREEN_SIZE.width,SCREEN_SIZE.height-SCREEN_SIZE.height*150/SIZE_HEIGHT)];\n        }else {\n            _scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, SCREEN_SIZE.height*150/SIZE_HEIGHT, SCREEN_SIZE.width,SCREEN_SIZE.height-SCREEN_SIZE.height*150/SIZE_HEIGHT-64)];\n        }\n        \n        // scrollView大小\n        _scrollView.contentSize = CGSizeMake(SCREEN_SIZE.width*5, SCREEN_SIZE.height-SCREEN_SIZE.height*150/SIZE_HEIGHT-64-50);\n        _scrollView.pagingEnabled = YES; // 设置一页一页翻\n        _scrollView.delegate = self;\n        _scrollView.backgroundColor = [UIColor whiteColor];\n        _scrollView.showsHorizontalScrollIndicator = NO;\n        _scrollView.showsVerticalScrollIndicator = NO;\n        //_scrollView.directionalLockEnabled=YES; // 定向锁定\n        _scrollView.bounces = NO;\n        \n        for (int i = 0; i<5; i++) {\n            UIScrollView *scroll = [[UIScrollView alloc] initWithFrame:CGRectMake(SCREEN_SIZE.width*i, 20, SCREEN_SIZE.width, SCREEN_SIZE.height-SCREEN_SIZE.height*150/SIZE_HEIGHT-20)];\n            scroll.tag = 100+i;\n            if (SCREEN_SIZE.height > 480) {\n                scroll.contentSize = CGSizeMake(SCREEN_SIZE.width, SCREEN_SIZE.height+SCREEN_SIZE.height*120/SIZE_HEIGHT);\n            }else{\n                scroll.contentSize = CGSizeMake(SCREEN_SIZE.width, self.view.frame.size.height);\n            }\n            scroll.showsVerticalScrollIndicator = NO;\n            scroll.delegate = self;\n            switch (i) {\n                case 0:\n                    [scroll addSubview:self.stepsRoundV];\n                    break;\n                case 1:\n                    [scroll addSubview:self.yesterdaySleepV];\n                    break;\n                case 2:\n                    [scroll addSubview:self.heartRateV];\n                    break;\n                case 3:\n                    [scroll addSubview:self.cprV];\n                    break;\n                case 4:\n                    [scroll addSubview:self.bloodPressureV];\n                default:\n                    break;\n            }\n            [_scrollView addSubview:scroll];\n        }\n    }\n    return _scrollView;\n}\n\n- (CPRAlgorithm *)cprAlgorithm {\n    if (!_cprAlgorithm) {\n        _cprAlgorithm = [[CPRAlgorithm alloc]init];\n        _cprAlgorithm.delegate_CPRAlgorithm = self;\n    }\n    return _cprAlgorithm;\n}\n\n// 连接手环状态的View（黑条）\n- (PromptFrameView *)promprframeview {\n    if (!_promprframeview) {\n        if (IOS_VERSION) {\n            _promprframeview = [[PromptFrameView alloc]initWithPosition:CGPointMake(0, SCREEN_SIZE.height*150/SIZE_HEIGHT)];\n        }else {\n            _promprframeview = [[PromptFrameView alloc]initWithPosition:CGPointMake(0, SCREEN_SIZE.height*150/SIZE_HEIGHT+64)];\n        }\n        \n        _promprframeview.hidden = YES;\n        _promprframeview.delegate = self;\n         _promprframeview.promptState = PromptStateBeingConnected;\n    }\n    return _promprframeview;\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    \n}\n\n@end\n"
    }
  ],
  "specials":[]
}



